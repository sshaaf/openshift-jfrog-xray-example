apiVersion: v1
kind: Template
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    iconClass: icon-jenkins
    tags: instant-app,jenkins,gogs,cicd
  name: cicd
message: "Use the following credentials for login:\nJenkins: use your OpenShift credentials\n Gogs Git Server: gogs/gogs"
parameters:
- displayName: DEV project name
  value: dev
  name: DEV_PROJECT
  required: true
- displayName: STAGE project name
  value: stage
  name: STAGE_PROJECT
  required: true
- displayName: Ephemeral
  description: Use no persistent storage
  value: "true"
  name: EPHEMERAL
  required: true
- description: Webhook secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: WEBHOOK_SECRET
  required: true
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_admin
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    name: default
# Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: testapp-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: ${WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: DEV_PROJECT
          value: ${DEV_PROJECT}
        - name: STAGE_PROJECT
          value: ${STAGE_PROJECT}
        jenkinsfile: |-
          def server = Artifactory.server 'ARTIFACTORY'
          def rtMaven = Artifactory.newMavenBuild()
          def buildInfo

          pipeline {
              agent {
                  label 'maven'
              }
              
              stages {


                  stage('Clone') {
                      steps {
                            git url: 'http://gogs:3000/gogs/test-app.git'
                      }
                  }

                  stage ('Artifactory configuration') {
                      steps{
                      script {
                          rtMaven.tool = "maven3" // Tool name from Jenkins configuration
                          rtMaven.deployer releaseRepo: 'libs-release-local', snapshotRepo: 'libs-snapshot-local', server: server
                          rtMaven.resolver releaseRepo: 'libs-release', snapshotRepo: 'libs-snapshot', server: server
                          buildInfo = Artifactory.newBuildInfo()
                          buildInfo.env.capture = true
                          scanConfig = [
                          'buildName'      : buildInfo.name,
                          'buildNumber'    : buildInfo.number,
                          ]
                      }
                      }
                  }
                  
                  stage('Exec Maven') {
                      steps {
                          script{
                            rtMaven.run pom: 'pom.xml', goals: 'clean install', buildInfo: buildInfo
                          }
                      }
                  }

                  stage('Create Image Builder') {
                              when {
                                expression {
                                  openshift.withCluster() {
                                    openshift.withProject(env.DEV_PROJECT) {
                                      return !openshift.selector("bc", "test-app").exists();
                                    }
                                  }
                                }
                              }
                              steps {
                                script {
                                  openshift.withCluster() {
                                    openshift.withProject(env.DEV_PROJECT) {
                                      openshift.newBuild("--name=test-app", "--image-stream=redhat-openjdk18-openshift:1.1", "--binary=true")
                                  }
                              }
                          }
                      }
                  }


                  stage('Build Image') {
                    steps {
                      script {
                        openshift.withCluster() {
                          openshift.withProject(env.DEV_PROJECT) {
                            openshift.selector("bc", "test-app").startBuild("--from-file=target/booster-1.0.0-SNAPSHOT.jar", "--wait=true")
                          }
                        }
                      }
                    }
                  }
                  
                  stage('Create DEV') {
                              when {
                                expression {
                                  openshift.withCluster() {
                                    openshift.withProject(env.DEV_PROJECT) {
                                      return !openshift.selector('dc', 'test-app').exists()
                                    }
                                  }
                                }
                              }
                              steps {
                                script {
                                  openshift.withCluster() {
                                    openshift.withProject(env.DEV_PROJECT) {
                                      def app = openshift.newApp("test-app:latest")
                                      app.narrow("svc").expose();

                                      def dc = openshift.selector("dc", "test-app")
                                      while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                                          sleep 10
                                      }
                                      openshift.set("triggers", "dc/test-app", "--manual")
                                  }
                              }
                          }
                      }
                  }
                  
                  stage('Deploy DEV') {
                              steps {
                                script {
                                  openshift.withCluster() {
                                    openshift.withProject(env.DEV_PROJECT) {
                                      openshift.selector("dc", "test-app").rollout().latest();
                                  }
                              }
                          }
                      }
                  }
                  
                  stage ('Publish build info') {
                      steps{
                          script{
                              server.publishBuildInfo buildInfo                    
                          }
                      }

                  }
                  
                  stage('Xray Scan') {
                      steps{
                          script {
                              echo 'scanning ' + buildInfo.number
                              scanResult = server.xrayScan scanConfig
                              print scanResult
                          }
                      }
                  }        
                  
                  
                  stage('Promote to STAGE?') {
                    agent {
                      label 'skopeo'
                    }
                    steps {
                      timeout(time:15, unit:'MINUTES') {
                          input message: "Promote to STAGE?", ok: "Promote"
                      }

                      script {
                        openshift.withCluster() {
                            openshift.tag("${env.DEV_PROJECT}/test-app:latest", "${env.STAGE_PROJECT}/test-app:stage")
                        }
                      }
                    }
                  }

                  stage('Deploy STAGE') {
                    steps {
                      script {
                        openshift.withCluster() {
                          openshift.withProject(env.STAGE_PROJECT) {
                              if (openshift.selector('dc', 'test-app').exists()) {
                                  openshift.selector('dc', 'test-app').delete()
                                  openshift.selector('svc', 'test-app').delete()
                                  openshift.selector('route', 'test-app').delete()
                              }                    
                              openshift.newApp("test-app:latest").narrow("svc").expose()
                          }
                        }
                      }
                    }
                  }        
                  
              }
          }
      type: JenkinsPipeline
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: cicd-pipeline
      role: jenkins-slave
    name: jenkins-slaves
  data:
    maven-template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>maven</name>
        <privileged>false</privileged>
        <alwaysPullImage>false</alwaysPullImage>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>maven</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
        <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
          <memory>false</memory>
        </workspaceVolume>
        <volumes />
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>registry.access.redhat.com/openshift3/jenkins-slave-maven-rhel7</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu>200m</resourceRequestCpu>
            <resourceRequestMemory>512Mi</resourceRequestMemory>
            <resourceLimitCpu>2</resourceLimitCpu>
            <resourceLimitMemory>4Gi</resourceLimitMemory>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
# Setup Demo
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: cicd-demo-installer
  spec:
    activeDeadlineSeconds: 400
    completions: 1
    parallelism: 1
    template:
      spec:
        containers:
        - env:
          - name: CICD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command:
          - /bin/bash
          - -x
          - -c
          - |
            oc set resources dc/jenkins --limits=cpu=2,memory=2Gi --requests=cpu=100m,memory=512Mi 
            oc label dc jenkins app=jenkins --overwrite 

            HOSTNAME=$(oc get route jenkins -o template --template='{{.spec.host}}' | sed "s/jenkins-${CICD_NAMESPACE}.//g")
            GOGS_HOSTNAME="gogs-$CICD_NAMESPACE.$HOSTNAME"

            if [ "${EPHEMERAL}" == "true" ] ; then
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-template.yaml \
                  --param=GOGS_VERSION=0.11.34 \
                  --param=HOSTNAME=$GOGS_HOSTNAME \
                  --param=SKIP_TLS_VERIFY=true
            else
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-persistent-template.yaml \
                  --param=GOGS_VERSION=0.11.34 \
                  --param=HOSTNAME=$GOGS_HOSTNAME \
                  --param=SKIP_TLS_VERIFY=true
            fi
            
            sleep 5

            GOGS_SVC=$(oc get svc gogs -o template --template='{{.spec.clusterIP}}')
            GOGS_USER=gogs
            GOGS_PWD=gogs

            oc rollout status dc gogs

            _RETURN=$(curl -o /tmp/curl.log -sL --post302 -w "%{http_code}" http://$GOGS_SVC:3000/user/sign_up \
              --form user_name=$GOGS_USER \
              --form password=$GOGS_PWD \
              --form retype=$GOGS_PWD \
              --form email=admin@gogs.com)

            sleep 5

            if [ $_RETURN != "200" ] && [ $_RETURN != "302" ] ; then
              echo "ERROR: Failed to create Gogs admin"
              cat /tmp/curl.log
              exit 255
            fi

            sleep 10

            cat <<EOF > /tmp/data.json
            {
              "clone_addr": "https://github.com/sshaaf/test-app.git",
              "uid": 1,
              "repo_name": "test-app"
            }
            EOF

            _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
            -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/migrate -d @/tmp/data.json)

            if [ $_RETURN != "201" ] ;then
              echo "ERROR: Failed to imported test-app GitHub repo"
              cat /tmp/curl.log
              exit 255
            fi

            sleep 5

            cat <<EOF > /tmp/data.json
            {
              "type": "gogs",
              "config": {
                "url": "https://openshift.default.svc.cluster.local/oapi/v1/namespaces/$CICD_NAMESPACE/buildconfigs/testapp-pipeline/webhooks/${WEBHOOK_SECRET}/generic",
                "content_type": "json"
              },
              "events": [
                "push"
              ],
              "active": true
            }
            EOF

            _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
            -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/gogs/test-app/hooks -d @/tmp/data.json)

            if [ $_RETURN != "201" ] ; then
              echo "ERROR: Failed to set webhook"
              cat /tmp/curl.log
              exit 255
            fi
          image: openshift/origin:v3.9.0
          name: cicd-demo-installer-job
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Never